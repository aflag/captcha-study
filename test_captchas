#!/usr/bin/python
# Copyright (C) 2012 Rafael Cunha de Almeida <rafael@kontesti.me>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE X
# CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import os
import sys
import re
import Image
import time
from sklearn.externals import joblib
from image_processing import DigitSeparator
import cProfile

model = joblib.load(sys.argv[1])

def make_test_dataset(files):
    dataset = []
    for file_path in files:
        file_name = os.path.basename(file_path)
        label = re.findall(r'^([0-9]+)-[0-9]+\..*$', file_name)[0]
        with open(file_path) as f:
            digits = DigitSeparator(Image.open(f).convert("L")).get_digits()
        dataset.append((label, digits))
    return dataset

def prof():
    base_dir = sys.argv[2]
    files = map(lambda x: os.path.join(base_dir, x), os.listdir(base_dir))
    dataset = make_test_dataset(files)
    t0 = time.time()
    matches = 0
    for labels,digits in dataset:
        pred_labels = model.predict(digits)
        if labels == ''.join(map(lambda x: str(int(x)), pred_labels)):
            matches += 1
    spent_time = time.time() - t0
    print 'Spent time:', spent_time, 'avg per predict:', spent_time/len(dataset)
    print 'Matches:', float(matches)/len(dataset)

cProfile.run('prof()', filename='/tmp/profile')
